# -*- coding: utf-8 -*-
"""Similarity Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Inu3HjmY8ErVC5lCQ_4TSHYj6RvoF81

# Load Dataset
"""

# Import Pandas
import pandas as pd

# For Colab
from google.colab import files
metadata = files.upload()

# Load Metadata
metadata = pd.read_csv('CleaningDataset.csv', low_memory=False)
# Print the first three rows
metadata.head(3)

#Print plot overviews of the first 5 Coffee Descriptions.
metadata['Description'].head()

"""# Identifying Term Frequency for Description"""

# Activate CountVectorizer
from sklearn.feature_extraction.text import CountVectorizer

# Count Vectorizer
vect = CountVectorizer(analyzer='word',stop_words='english',lowercase=True)  
vects = vect.fit_transform(metadata['Description'])

td = pd.DataFrame(vects.todense()).iloc[:78]  
td.columns = vect.get_feature_names()
term_document_matrix = td.T
term_document_matrix.columns = ['Blend '+str(i) for i in range(1, 79)]
term_document_matrix['total_count'] = term_document_matrix.sum(axis=1)

#Number of Unique Words
print(term_document_matrix.shape)

# Top 25 words 
term_document_matrix = term_document_matrix.sort_values(by ='total_count',ascending=False)[:25] 

text_file = open('TF-.txt', 'w')
term_document_matrix['total_count'].plot.bar()

"""# Identifying Term Frequency for Tasting Notes"""

# Activate CountVectorizer
from sklearn.feature_extraction.text import CountVectorizer

# Count Vectorizer
vect = CountVectorizer(analyzer='word',stop_words='english',lowercase=True)  
vects = vect.fit_transform(metadata['Tasting Notes'])

td = pd.DataFrame(vects.todense()).iloc[:78]  
td.columns = vect.get_feature_names()
term_document_matrix = td.T
term_document_matrix.columns = ['Blend '+str(i) for i in range(1, 79)]
term_document_matrix['total_count'] = term_document_matrix.sum(axis=1)
print(term_document_matrix.shape)

# Top 25 words 
top = term_document_matrix.sort_values(by ='total_count',ascending=False)[:25] 


top['total_count'].plot.bar()

"""# Recommendation based on Description"""

#Import TfIdfVectorizer from scikit-learn
from sklearn.feature_extraction.text import TfidfVectorizer

#Define a TF-IDF Vectorizer Object. 
#Remove all english stop words such as 'the', 'a'
#Sets all words to lowercase
tfidf = TfidfVectorizer(analyzer='word',stop_words='english',lowercase=True)

#Replace NaN with an empty string
metadata['Description'] = metadata['Description'].fillna('')

#Construct the required TF-IDF matrix by fitting and transforming the data
tfidf_matrix = tfidf.fit_transform(metadata['Description'])

#Output the shape of tfidf_matrix
tfidf_matrix.shape

tfidf.get_feature_names()

# Import linear_kernel
from sklearn.metrics.pairwise import linear_kernel

# Compute the cosine similarity matrix
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

cosine_sim.shape

cosine_sim[1]

#Construct a reverse map of indices and Coffee Names
indices = pd.Series(metadata.index, index=metadata['Coffee Name']).drop_duplicates()

indices[:10]

text_file = open('RecommendationDescription.txt', 'w')

text_file.write("CSCI 187 - Project Coffee \n" )
text_file.write("Matthew Rahardja \n" )
text_file.write("This Text File contains the top 5 similarity results\n" )
text_file.write("for each Coffee Blend based on description \n\n")


for ind in metadata.index:
    Selected_Blend = metadata['Coffee Name'][ind]
    Selected_Description = metadata['Description'][ind]
    idx = indices[Selected_Blend]

    # Get the pairwise similarity scores of all blends with that blend
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 5 most similar coffee
    sim_scores = sim_scores[1:6]

    # Get the movie indices
    coffee_indices = [i[0] for i in sim_scores]

    # Return the top 10 most similar coffee
    
    text_file.write("%s\n" % Selected_Blend)
    text_file.write("%s\n" % Selected_Description)

    text_file.write("\nBlend Index         Blend Name\n")
    text_file.write("%s\n" % metadata['Coffee Name'].iloc[coffee_indices])
    text_file.write("\nBlend Index         Description\n")
    text_file.write("%s\n" % metadata['Description'].iloc[coffee_indices])
    text_file.write("\nSimilarity Score\n")
    text_file.write("%s\n\n\n\n" % sim_scores)

text_file.close()

"""# Recommendation Based on Tasting Notes"""

#Import TfIdfVectorizer from scikit-learn
from sklearn.feature_extraction.text import TfidfVectorizer

#Define a TF-IDF Vectorizer Object. 
#Remove all english stop words such as 'the', 'a'
#Sets all words to lowercase
tfidf = TfidfVectorizer(analyzer='word',stop_words='english',lowercase=True)

#Replace NaN with an empty string
metadata['Tasting Notes'] = metadata['Tasting Notes'].fillna('')

#Construct the required TF-IDF matrix by fitting and transforming the data
tfidf_matrix = tfidf.fit_transform(metadata['Tasting Notes'])

#Output the shape of tfidf_matrix
tfidf_matrix.shape

tfidf.get_feature_names()

# Import linear_kernel
from sklearn.metrics.pairwise import linear_kernel

# Compute the cosine similarity matrix
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

cosine_sim.shape

cosine_sim[1]

#Construct a reverse map of indices and Coffee Names
indices = pd.Series(metadata.index, index=metadata['Coffee Name']).drop_duplicates()

indices[:10]

text_file = open('RecommendationFlavor.txt', 'w')

text_file.write("CSCI 187 - Project Coffee \n" )
text_file.write("Matthew Rahardja \n" )
text_file.write("This txt file contains the top 5 similarity results\n" )
text_file.write("for each Coffee Blend based on Flavor Notes \n\n")


for ind in metadata.index:
    Selected_Blend = metadata['Coffee Name'][ind]
    Selected_Description = metadata['Tasting Notes'][ind]
    idx = indices[Selected_Blend]

    # Get the pairwise similarity scores of all blends with that blend
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 5 most similar coffee
    sim_scores = sim_scores[1:6]

    # Get the movie indices
    coffee_indices = [i[0] for i in sim_scores]
    # Return the top 10 most similar coffee
    
    text_file.write("%s\n" % Selected_Blend)
    text_file.write("%s\n" % Selected_Description)

    text_file.write("\nBlend Index         Blend Name\n")
    text_file.write("%s\n" % metadata['Coffee Name'].iloc[coffee_indices])
    text_file.write("\nBlend Index         Tasting Note\n")
    text_file.write("%s\n" % metadata['Tasting Notes'].iloc[coffee_indices])
    text_file.write("\nSimilarity Score\n")
    text_file.write("%s\n\n\n\n" % sim_scores)

text_file.close()